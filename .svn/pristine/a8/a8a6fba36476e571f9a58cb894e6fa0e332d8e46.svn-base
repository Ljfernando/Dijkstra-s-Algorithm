
public class BinomialQueue {
	int size;
	QNode head;
	QNode[] vertexList;
	
	BinomialQueue(int size){
		this.size = size;
		vertexList = new QNode[size];
		head = null;
		
	}
	
	public class QNode{
		QNode parent;
		QNode leftChild;
		QNode rightSib;
		int priority;
		int degree;
		int value;
		public QNode(QNode parent, QNode leftChild, QNode rightSib, int priority, int degree, int value) {
			this.parent = parent;
			this.leftChild = leftChild;
			this.rightSib = rightSib;
			this.priority = priority;
			this.degree = degree;
			this.value = value;
		}
		public QNode getParent() {
			return parent;
		}
		public void setParent(QNode parent) {
			this.parent = parent;
		}
		public QNode getLeftChild() {
			return leftChild;
		}
		public void setLeftChild(QNode leftChild) {
			this.leftChild = leftChild;
		}
		public QNode getRightSib() {
			return rightSib;
		}
		public void setRightSib(QNode rightSib) {
			this.rightSib = rightSib;
		}
		public int getPriority() {
			return priority;
		}
		public void setPriority(int priority) {
			this.priority = priority;
		}
		public int getDegree() {
			return degree;
		}
		public void setDegree(int degree) {
			this.degree = degree;
		}
		public int getValue() {
			return value;
		}
		public void setValue(int value) {
			this.value = value;
		}
		@Override
		public String toString() {
			if(parent != null){
				int p = parent.getValue();
				return"QNode [priority=" + priority + ", degree=" + degree + ", value=" + value +" parent =" + parent.getValue()   +"]";
			}
			else
				return "QNode [priority=" + priority + ", degree=" + degree + ", value=" + value +" parent =" + " no parent"   +"]";
		}
		
	}
	
	public boolean empty() {
		if (head == null)
			return true;
		else
			return false;
	}
	
	public int removeSmallest(){

		if(empty())
			return 0;
		
		else if(head.getRightSib() == null){
			int min = head.getValue();

			head = reverseList(head.getLeftChild());
			
			return min;
		}
		
		else
		{
			
			int min = Integer.MAX_VALUE;

			QNode prev = null;
			QNode curr = head;
			for(curr = head; curr != null; curr = curr.getRightSib()){

				if(curr.getPriority() < min)
					min = curr.getPriority();
			}

			if(head.getPriority() == min){
				curr = head;
				head = head.getRightSib();
				head = mergeLists(reverseList(curr.getLeftChild()), head);
				combineQueues(head);
				curr.setLeftChild(null);
				return curr.getValue();
			}
			for(curr = head; curr.getPriority() != min; curr = curr.getRightSib()){
				
				prev = curr;
			}
			if(curr == head){
				head = head.getRightSib();
			}
			
			else
				
				prev.setRightSib(curr.getRightSib());
			
			curr.setRightSib(null);

			if(curr.getLeftChild() == null){
				return curr.getValue();
			
			}
			QNode child = reverseList(curr.getLeftChild());
			head = mergeLists(child , head);
			combineQueues(head);

			curr.setLeftChild(null);

			return curr.getValue();
		}
		
	}
	
	public void decreaseKey(int elem, int new_priority){
		QNode node = vertexList[elem];
		if(node.getPriority() > new_priority){
			node.setPriority(new_priority);

			adjustHeap(elem);
		}
		
	}
	
	public void adjustHeap(int elem){
		QNode curr =vertexList[elem];
		if(curr.getParent() == null){
			return;
		}
		if(curr.getParent().getPriority() > curr.getPriority()){
			QNode parent = curr.getParent();
			int tempPriority = parent.getPriority();
			int tempValue = parent.getValue();
			
			parent.setPriority(curr.getPriority());
			parent.setValue(curr.getValue());
			
			curr.setPriority(tempPriority);
			curr.setValue(tempValue);
			
			
			vertexList[parent.getValue()] = parent;
			vertexList[curr.getValue()] = curr;
			adjustHeap(elem);
		}
	}
	
	public void printQueue(){

		for(QNode curr = head; curr != null; curr = curr.getRightSib()){
			System.out.println(curr);
			}
	
	}

	public QNode getHead(){
		return head;
	}
	public QNode reverseList(QNode node){
		if(node == null)
			return node;
		QNode curr = node;
		node.setParent(null);
		if(node.getRightSib() != null){
			
			QNode prev = null;
			QNode next = null;
			while(curr != null){
				curr.setParent(null);
				next = curr.getRightSib();
				
				curr.setRightSib(prev);
				
				prev = curr;

				curr = next;
				
			}
			return prev;
			
		}
		else 
			return node;
	}
	
	public void insertElem(int elem, int priority){

		QNode newNode = new QNode(null, null, null, priority, 0, elem);
		
		if(head == null){
			head = newNode;
		}
		else{
			
			head = mergeLists(newNode, head);

			
			combineQueues(head);


		}

		vertexList[elem] = newNode;
		
	}

	public QNode mergeLists(QNode node1, QNode node2){

		if (node1 == null){
			return node2;
		}
		else if(node2 == null){
			return node1;
		}
		else if(node1.getDegree() <= node2.getDegree()){
			node1.setRightSib(mergeLists(node1.getRightSib(), node2));
			return node1;
		}
		else{
			node2.setRightSib(mergeLists(node1, node2.getRightSib()));
			return node2;
		}
	}

	public void combineQueues(QNode node){
		
		QNode prev = null;
		QNode curr = node;
		QNode parent;
		QNode child;
		while(curr.getRightSib() != null){
			
			if(curr.getRightSib().getRightSib() == null){
				if(curr.getDegree() == curr.getRightSib().getDegree()){

					if(curr.getPriority() < curr.getRightSib().getPriority()){
						parent = curr;
						child = curr.getRightSib();
					}
					else{
						parent = curr.getRightSib();
						child = curr;
					}
					if(prev == null)
						head = parent;
					parent.setRightSib(null);
					child.setParent(parent);
					child.setRightSib(parent.getLeftChild());
					parent.setLeftChild(child);
					parent.setDegree(parent.getDegree() + 1);
						
				}
				break;
			}
			if(curr.getDegree() == curr.getRightSib().getRightSib().getDegree() || curr.getDegree() != curr.getRightSib().getDegree()){
				prev = curr;
				curr = curr.getRightSib();
				break;
			}

			if(curr.getDegree() == curr.getRightSib().getDegree()){
				if(curr.getPriority() < curr.getRightSib().getPriority()){
					parent = curr;
					child = curr.getRightSib();

					parent.setRightSib(curr.getRightSib().getRightSib());

				}
				else{
					parent = curr.getRightSib();
					child = curr;
				}
				if(prev == null)
					head = parent;

				child.setRightSib(parent.getLeftChild());
				child.setParent(parent);
				parent.setLeftChild(child);
				parent.setDegree(parent.getDegree() + 1);
				
				
				curr = parent;



				
			}
			
		}
		
	}
//	public static void main(String[] args){
//		BinomialQueue bq = new BinomialQueue(30);
//		bq.insertElem(0, 0);
//		bq.insertElem(1, 1);
//		bq.insertElem(2, 2);
//		bq.insertElem(4,4);
//		bq.insertElem(5,5);
//		bq.insertElem(6,6);
//
//		for(QNode curr = bq.head; curr != null; curr = curr.getRightSib()){
//			System.out.println(curr);
//		}
//
//		bq.head = bq.reverseList(bq.head);
//		System.out.println(bq.removeSmallest());
//		System.out.println();
//		for(QNode curr = bq.head; curr != null; curr = curr.getRightSib()){
//			System.out.println(curr);
//		}
//		
//	}

}
