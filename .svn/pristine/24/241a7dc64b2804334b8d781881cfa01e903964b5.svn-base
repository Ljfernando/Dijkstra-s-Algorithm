
public class BinomialQueue {
	int size;
	QNode head;
	QNode[] priorityList;
	
	BinomialQueue(int size){
		this.size = size;
		priorityList = new QNode[size + 1];
		head = null;
		
	}
	
	private class QNode{
		QNode parent;
		QNode leftChild;
		QNode rightSib;
		int priority;
		int degree;
		int value;
		public QNode(QNode parent, QNode leftChild, QNode rightSib, int priority, int degree, int value) {
			this.parent = parent;
			this.leftChild = leftChild;
			this.rightSib = rightSib;
			this.priority = priority;
			this.degree = degree;
			this.value = value;
		}
		public QNode getParent() {
			return parent;
		}
		public void setParent(QNode parent) {
			this.parent = parent;
		}
		public QNode getLeftChild() {
			return leftChild;
		}
		public void setLeftChild(QNode leftChild) {
			this.leftChild = leftChild;
		}
		public QNode getRightSib() {
			return rightSib;
		}
		public void setRightSib(QNode rightSib) {
			this.rightSib = rightSib;
		}
		public int getPriority() {
			return priority;
		}
		public void setPriority(int priority) {
			this.priority = priority;
		}
		public int getDegree() {
			return degree;
		}
		public void setDegree(int degree) {
			this.degree = degree;
		}
		public int getValue() {
			return value;
		}
		public void setValue(int value) {
			this.value = value;
		}
		@Override
		public String toString() {
			return "QNode [priority=" + priority + ", degree=" + degree + ", value=" + value + "]";
		}
		
	}
	
	public boolean empty() {
		if (head == null)
			return true;
		else
			return false;
	}
	
	public int removeSmallest(){
		System.out.println("Removing smallest from this queue");
		System.out.println("-------");
		printQueue();
		System.out.println("-------");

		if(empty())
			return 0;
		
		else if(head.getRightSib() == null){
			
			int min = head.getValue();
			System.out.println("Removing the head: " + head);

			head = reverseList(head.getLeftChild());
			System.out.println("Returning " + min);
			System.out.println("Head is now: " + head);
			return min;
		}
		
		else
		{
			int min = head.getValue();
			System.out.println("Starting with a min of " + min);
			QNode prev = null;
			QNode curr = head;
			for(curr = head; curr != null; curr = curr.getRightSib()){
				if(curr.getPriority() < min)
					min = curr.getPriority();
			}
			System.out.println("Head is" + head);

			if(head.getValue() == min){
				curr = head;
				head = head.getRightSib();
				head = mergeLists(reverseList(curr.getLeftChild()), head);
				combineQueues(head);
				curr.setLeftChild(null);
				return curr.getValue();
			}
			for(curr = head; curr.getPriority() != min; curr = curr.getRightSib()){
				
				prev = curr;
			}
			System.out.println("Removing: " + curr);
			if(curr == head){
				head = head.getRightSib();
			}
			
			else
				prev.setRightSib(curr.getRightSib());
			
			curr.setRightSib(null);

			if(curr.getLeftChild() == null)
				return curr.getValue();
			
			QNode child = reverseList(curr.getLeftChild());

			head = mergeLists(child,head);
			combineQueues(head);

			curr.setLeftChild(null);

			return curr.getValue();
		}
		
	}
	
	public void decreaseKey(int elem, int new_priority){
		
	}
	
	public void printQueue(){

		for(QNode curr = head; curr != null; curr = curr.getRightSib()){
			if(curr.getPriority() == 4)
				break;
			System.out.println(curr);
				
			}
		
	}

	public QNode getHead(){
		return head;
	}
	public QNode reverseList(QNode node){
		System.out.println("Before:");

		if(node == null)
			return node;
		QNode curr = node;
		if(node.getRightSib() != null){
			
			QNode prev = null;
			QNode next = null;
			int i = 0;
			while(curr != null){
				System.out.println(i++);
				next = curr.getRightSib();
				System.out.println("Next is= " + next);
				
				curr.setRightSib(prev);
				System.out.println("Pointing: " + curr + " to: " + prev);
				
				prev = curr;
				System.out.println("Prev = " + prev);

				curr = next;
				System.out.println("Curr = " + curr);
				
			}
			return prev;
			
		}
		else 
			return node;
	}
	
	public void insertElem(int elem, int priority){

		QNode newNode = new QNode(null, null, null, priority, 0, elem);
		if(head == null){
			head = newNode;
		}
		else{
			System.out.println("Inserting: " + newNode);
			
			head = mergeLists(newNode, head);

			
			printQueue();
			combineQueues(head);

			printQueue();
			System.out.println();

		}

		priorityList[priority] = newNode;
		
	}

	public QNode mergeLists(QNode node1, QNode node2){
		System.out.println("Merging lists");
		System.out.println("Merging newNode: " + node1 + " to Head: " + node2);

		if (node1 == null){
			return node2;
		}
		else if(node2 == null){
			return node1;
		}
		else if(node1.getDegree() <= node2.getDegree()){
			node1.setRightSib(mergeLists(node1.getRightSib(), node2));
			return node1;
		}
		else{
			node2.setRightSib(mergeLists(node1, node2.getRightSib()));
			return node2;
		}
	}

	public void combineQueues(QNode node){

		System.out.println("Combining queues");

		
		QNode prev = null;
		QNode curr = node;
		QNode parent;
		QNode child;
		while(curr.getRightSib() != null){
			
			if(curr.getRightSib().getRightSib() == null){
				if(curr.getDegree() == curr.getRightSib().getDegree()){
					System.out.println("Now i'm here");
					if(curr.getPriority() < curr.getRightSib().getPriority()){
						parent = curr;
						child = curr.getRightSib();
					}
					else{
						parent = curr.getRightSib();
						child = curr;
					}
					if(prev == null)
						head = parent;
					
					parent.setRightSib(null);

					child.setRightSib(parent.getLeftChild());
					parent.setLeftChild(child);
					parent.setDegree(parent.getDegree() + 1);
					System.out.println("Setting " + parent + " right sib to " + parent.getRightSib());
					System.out.println("Setting " + parent + " left child to " + parent.getLeftChild());
					if(priorityList[4] != null){
						if(priorityList[4].getRightSib()!= null){
							System.out.println("HAALLLTTT");
							System.out.println(priorityList[4].getRightSib());
						}
					}
						
				}
				break;
			}
			if(curr.getDegree() == curr.getRightSib().getRightSib().getDegree() || curr.getDegree() != curr.getRightSib().getDegree()){
				prev = curr;
				curr = curr.getRightSib();
			}

			if(curr.getDegree() == curr.getRightSib().getDegree()){
				System.out.println("Looking at " + curr + " and " + curr.getRightSib());
				if(curr.getPriority() < curr.getRightSib().getPriority()){
					parent = curr;
					child = curr.getRightSib();

					parent.setRightSib(curr.getRightSib().getRightSib());

				}
				else{
					parent = curr.getRightSib();
					child = curr;
				}
				if(prev == null)
					head = parent;

				child.setRightSib(parent.getLeftChild());
				parent.setLeftChild(child);
				parent.setDegree(parent.getDegree() + 1);
				System.out.println("I'm here");
				System.out.println("Setting " + parent + " right sib to " + parent.getRightSib());
				System.out.println("Setting " + parent + " left child to " + parent.getLeftChild());


				curr = parent;



				
			}
			
		}
		
//		if(node.getRightSib() != null){
//			QNode prev = node;
//			QNode curr = prev.getRightSib();
//			QNode parent;
//			QNode child;
//			if(prev.getDegree() == curr.getDegree()){
//				if(prev.getPriority() < curr.getPriority()){
//					parent = prev;
//					child = curr;
//					parent.setRightSib(curr.getRightSib());
//				}
//				else{
//					child = prev;
//					parent = curr;
//				}
//
//				child.setRightSib(parent.getLeftChild());
//				parent.setLeftChild(child);
//				parent.setDegree(parent.getDegree() + 1);
//				if(child == head)
//					head = parent;
//				curr = parent;
//				
//			}
//			while(curr.getRightSib() != null){
//
//				if(curr.getDegree() == curr.getRightSib().getDegree()){
//					if(curr.getRightSib().getRightSib() != null && curr.getDegree() == curr.getRightSib().getRightSib().getDegree()){
//						curr = curr.getRightSib();
//						continue;
//					}
//					if(curr.getPriority() < curr.getRightSib().getPriority()){
//						parent = curr;
//						child = curr.getRightSib();
//						parent.setRightSib(curr.getRightSib().getRightSib());
//					}
//					else{
//						parent = curr.getRightSib();
//						child = curr;
//					}
//					child.setRightSib(parent.getLeftChild());
//					parent.setLeftChild(child);
//					prev.setRightSib(parent);
//					parent.setDegree(parent.getDegree() + 1);
//					
//					if(child == head)
//						head = parent;
//					
//					curr = parent;
//					
//
//					continue;
//				}
//				prev = curr;
//				curr = curr.getRightSib();
//
//			}
//		}
		
	}
//	public static void main(String[] args){
//		BinomialQueue bq = new BinomialQueue(30);
//		bq.insertElem(0, 0);
//		bq.insertElem(1, 1);
//		bq.insertElem(2, 2);
//		bq.insertElem(4,4);
//		bq.insertElem(5,5);
//		bq.insertElem(6,6);
//
//		for(QNode curr = bq.head; curr != null; curr = curr.getRightSib()){
//			System.out.println(curr);
//		}
//
//		bq.head = bq.reverseList(bq.head);
//		System.out.println(bq.removeSmallest());
//		System.out.println();
//		for(QNode curr = bq.head; curr != null; curr = curr.getRightSib()){
//			System.out.println(curr);
//		}
//		
//	}

}
